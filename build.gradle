import java.text.SimpleDateFormat
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

if (!project.hasProperty("patch_version")) {
    ext.patch_version = "0"
}

buildscript {
    ext {
        kotlinVersion = '1.2.51'
        springBootVersion = '2.0.6.RELEASE'
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("com.bmuschko:gradle-docker-plugin:4.0.1")

    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.bmuschko.docker-remote-api'

group = 'com.jahnelgroup.util'
version = "${project.property('major_version')}.${project.property('minor_version')}.${project.property('patch_version')}"
sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    jcenter()
}

ext {
    springCloudVersion = 'Finchley.SR1'
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-data-ldap')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.ldap:spring-ldap-core')
    implementation('org.springframework.security:spring-security-ldap')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('com.unboundid:unboundid-ldapsdk')
    implementation('com.fasterxml.jackson.module:jackson-module-kotlin')
    implementation('org.springframework.cloud:spring-cloud-starter-netflix-zuul')
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    testImplementation('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

springBoot {
    buildInfo {
        properties {
            version = "${project.property('major_version')}.${project.property('minor_version')}.${project.property('patch_version')}"
            additional = [
                "time": buildTime()
            ]
        }
    }
}

bootJar {
    launchScript()
//	excludeDevtools = false
}

build.shouldRunAfter clean

task createDockerImage(type: DockerBuildImage) {
    dependsOn clean, build
    inputDir = file('.')
    tags = ["jahnelgroup/activedirectory-proxy:${project.version}", "jahnelgroup/activedirectory-proxy:latest"]
}

static def buildTime() {
    final dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ssZ")
    dateFormat.timeZone = TimeZone.getTimeZone('GMT')
    dateFormat.format(new Date())
}
